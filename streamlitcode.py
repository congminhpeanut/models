import streamlit as st
import tensorflow as tf
import cv2
import numpy as np
import gc

# Configure TensorFlow to use memory growth
gpus = tf.config.experimental.list_physical_devices('GPU')
if gpus:
    try:
        for gpu in gpus:
            tf.config.experimental.set_memory_growth(gpu, True)
    except RuntimeError as e:
        print(e)

# Cache model loading with resource management
@st.cache_resource(show_spinner=False)
def load_model():
    model_path = 'best_model.h5'
    return tf.keras.models.load_model(model_path)

model = load_model()

# Optimized image processing and prediction
def predict_image(image_file):
    try:
        # ƒê·ªçc file ·∫£nh t·ª´ b·ªô nh·ªõ
        img_data = image_file.read()
        img_array = np.frombuffer(img_data, np.uint8)
        img = cv2.imdecode(img_array, cv2.IMREAD_COLOR)
        
        # Optimized cropping pipeline
        def center_crop(img, target_size):
            h, w = img.shape[:2]
            if w > h:
                pad = (w - h) // 2
                img = img[:, pad:pad+h] if w > h else img
            else:
                pad = (h - w) // 2
                img = img[pad:pad+w, :] if h > w else img
            return cv2.resize(img, (target_size, target_size), 
                            interpolation=cv2.INTER_LANCZOS4)

        # Two-stage cropping with optimized sizes
        img_cropped = center_crop(img, 1500)
        img_cropped = center_crop(img_cropped, 800)
        
        # Convert and preprocess image
        img_processed = tf.image.convert_image_dtype(img_cropped, tf.float32)
        img_array = tf.expand_dims(img_processed, axis=0)

        # Memory-efficient prediction
        with tf.device('/cpu:0'):  # Force CPU prediction if memory issues
            prediction = model.predict(img_array, verbose=0)
            probabilities = prediction[0]
        
        # Clean up resources
        del img, img_cropped, img_processed, img_array
        gc.collect()

        # Post-processing
        sorted_indices = np.argsort(probabilities)[::-1]
        class_mapping = {
            0: 'Vi√™m do t·∫°p tr√πng ho·∫∑c t√°c nh√¢n kh√°c',
            1: 'Quang tr∆∞·ªùng c√≥ s·ª± hi·ªán di·ªán c·ªßa clue cell',
            2: 'Quang tr∆∞·ªùng c√≥ s·ª± hi·ªán di·ªán c·ªßa vi n·∫•m'
        }

        # Format results
        top_results = []
        for i in range(3):
            idx = sorted_indices[i]
            confidence = int(round(probabilities[idx] * 100))
            if confidence > 0:
                class_name = class_mapping[idx].replace("Quang tr∆∞·ªùng ", "", 1) if i > 0 else class_mapping[idx]
                top_results.append(f"{class_name} ({confidence}%)")

        return ", ".join(top_results[:2])  # Return top 2 results

    except Exception as e:
        st.error(f"L·ªói x·ª≠ l√Ω ·∫£nh: {str(e)}")
        return "Kh√¥ng th·ªÉ ph√¢n t√≠ch ·∫£nh"

# Custom UI components
def styled_header(text):
    st.markdown(f"""
    <div style="
        padding: 12px;
        background: linear-gradient(45deg, #1f77b4, #4a90e2);
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin-bottom: 25px;
    ">
        <h2 style="color: white; margin:0;">{text}</h2>
    </div>
    """, unsafe_allow_html=True)

# App layout
def main():
    # Page config
    st.set_page_config(
        page_title="AI Ph√¢n Lo·∫°i H√¨nh ·∫¢nh Soi T∆∞∆°i Huy·∫øt Tr·∫Øng",
        page_icon="üî¨",
        layout="centered",
        initial_sidebar_state="expanded"
    )

    # Main content
    with st.container():
        styled_header("Ph√¢n lo·∫°i h√¨nh ·∫£nh soi t∆∞∆°i huy·∫øt tr·∫Øng")
        st.markdown("""
            <div style="font-size: 16px; color: #444; line-height: 1.6;">
                ·ª®ng d·ª•ng s·ª≠ d·ª•ng m√¥ h√¨nh MobileNetV2 ƒë∆∞·ª£c hu·∫•n luy·ªán chuy√™n s√¢u ƒë·ªÉ ph√¢n t√≠ch 
                h√¨nh ·∫£nh soi t∆∞∆°i huy·∫øt tr·∫Øng v·ªõi ƒë·ªô ch√≠nh x√°c cao. H·ªó tr·ª£ ph√°t hi·ªán:
                <ul>
                    <li>Vi√™m do t·∫°p tr√πng</li>
                    <li>Clue cell</li>
                    <li>Vi n·∫•m</li>
                </ul>
                <b>L∆∞u √Ω:</b> ·∫¢nh ƒë·∫ßu v√†o c·∫ßn ƒë∆∞·ª£c ch·ª•p ·ªü ƒë·ªô ph√≥ng ƒë·∫°i X40
            </div>
        """, unsafe_allow_html=True)

    # Sidebar
    with st.sidebar:
        styled_header("Th√¥ng tin h·ªá th·ªëng")
        st.markdown("""
            <div style="padding: 10px; background: #f8f9fa; border-radius: 8px;">
                <p style="font-size: 14px; color: #666;">
                    <b>Phi√™n b·∫£n:</b> 2.1<br>
                    <b>C·∫≠p nh·∫≠t:</b> 15/07/2024<br>
                    <b>ƒê·ªô ch√≠nh x√°c:</b> 92.4% (test set)<br>
                    <b>Th·ªùi gian x·ª≠ l√Ω:</b> ~3s/·∫£nh
                </p>
            </div>
        """, unsafe_allow_html=True)

    # File uploader
    uploaded_file = st.file_uploader(
        "T·∫£i l√™n h√¨nh ·∫£nh soi t∆∞∆°i (JPG/PNG)", 
        type=["jpg", "jpeg", "png"],
        accept_multiple_files=False,
        help="Ch·ªçn h√¨nh ·∫£nh ch·ª•p ti√™u b·∫£n soi t∆∞∆°i ·ªü ƒë·ªô ph√≥ng ƒë·∫°i X40"
    )

    if uploaded_file:
        # Preview section
        with st.expander("Xem tr∆∞·ªõc h√¨nh ·∫£nh", expanded=True):
            pil_image = Image.open(uploaded_file)
            st.image(pil_image.resize((600, 600)), 
                    caption="H√¨nh ·∫£nh ƒë·∫ßu v√†o",
                    use_column_width=True)

        # Prediction
        with st.spinner("ƒêang ph√¢n t√≠ch h√¨nh ·∫£nh..."):
            result = predict_image(uploaded_file)
            
        st.success(f"""
            **K·∫øt qu·∫£ ph√¢n t√≠ch:**  
            {result}
        """)

        # Add spacing
        st.markdown("<div style='margin-top: 50px;'></div>", 
                   unsafe_allow_html=True)

if __name__ == "__main__":
    main()
